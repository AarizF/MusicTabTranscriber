{"ast":null,"code":"var _jsxFileName = \"/Users/aarizfaisal/Developer/MusicTabTranscriber/frontend/src/pages/Home.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Box, CircularProgress, Typography } from \"@mui/material\";\nimport FileUpload from \"../components/FileUpload\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [pdfUrl, setPdfUrl] = useState(null);\n  const handleFileUpload = async file => {\n    setLoading(true); // Set loading to true\n    setPdfUrl(null); // Clear any previous PDF URL\n\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      const backendUrl = process.env.REACT_APP_BACKEND_URL;\n      const response = await fetch(`${backendUrl}/transcribe`, {\n        method: \"POST\",\n        body: formData\n      });\n      if (response.ok) {\n        const blob = await response.blob();\n        const url = URL.createObjectURL(blob);\n        setPdfUrl(url); // Set the URL for the PDF file\n      } else {\n        console.error(\"Failed to transcribe audio\");\n      }\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n    } finally {\n      setLoading(false); // Set loading to false after the request completes\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: \"100vh\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      bgcolor: \"#121212\",\n      color: \"#fff\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Drag MP3 Here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n      color: \"secondary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this) : pdfUrl ? /*#__PURE__*/_jsxDEV(\"a\", {\n      href: pdfUrl,\n      download: \"transcription.pdf\",\n      style: {\n        color: \"#90caf9\"\n      },\n      children: \"Download PDF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(FileUpload, {\n      onFileUpload: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"QiOfd1GxExLH3+eTNIxZ5plZxto=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","Box","CircularProgress","Typography","FileUpload","jsxDEV","_jsxDEV","Home","_s","loading","setLoading","pdfUrl","setPdfUrl","handleFileUpload","file","formData","FormData","append","backendUrl","process","env","REACT_APP_BACKEND_URL","response","fetch","method","body","ok","blob","url","URL","createObjectURL","console","error","sx","height","display","flexDirection","justifyContent","alignItems","bgcolor","color","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","href","download","style","onFileUpload","_c","$RefreshReg$"],"sources":["/Users/aarizfaisal/Developer/MusicTabTranscriber/frontend/src/pages/Home.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Box, CircularProgress, Typography } from \"@mui/material\";\nimport FileUpload from \"../components/FileUpload\";\n\nconst Home: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [pdfUrl, setPdfUrl] = useState<string | null>(null);\n\n  const handleFileUpload = async (file: File) => {\n    setLoading(true); // Set loading to true\n    setPdfUrl(null); // Clear any previous PDF URL\n\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n\n      const backendUrl = process.env.REACT_APP_BACKEND_URL;\n\n      const response = await fetch(`${backendUrl}/transcribe`, {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (response.ok) {\n        const blob = await response.blob();\n        const url = URL.createObjectURL(blob);\n        setPdfUrl(url); // Set the URL for the PDF file\n      } else {\n        console.error(\"Failed to transcribe audio\");\n      }\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n    } finally {\n      setLoading(false); // Set loading to false after the request completes\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        height: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        bgcolor: \"#121212\",\n        color: \"#fff\",\n      }}\n    >\n      <Typography variant=\"h4\" gutterBottom>\n        Drag MP3 Here\n      </Typography>\n      {loading ? (\n        <CircularProgress color=\"secondary\" />\n      ) : pdfUrl ? (\n        <a\n          href={pdfUrl}\n          download=\"transcription.pdf\"\n          style={{ color: \"#90caf9\" }}\n        >\n          Download PDF\n        </a>\n      ) : (\n        <FileUpload onFileUpload={handleFileUpload} />\n      )}\n    </Box>\n  );\n};\n\nexport default Home;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,GAAG,EAAEC,gBAAgB,EAAEC,UAAU,QAAQ,eAAe;AACjE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,IAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAgB,IAAI,CAAC;EAEzD,MAAMa,gBAAgB,GAAG,MAAOC,IAAU,IAAK;IAC7CJ,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAClBE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;;IAEjB,IAAI;MACF,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;MAE7B,MAAMI,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB;MAEpD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,UAAU,aAAa,EAAE;QACvDM,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEV;MACR,CAAC,CAAC;MAEF,IAAIO,QAAQ,CAACI,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClC,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;QACrCf,SAAS,CAACgB,GAAG,CAAC,CAAC,CAAC;MAClB,CAAC,MAAM;QACLG,OAAO,CAACC,KAAK,CAAC,4BAA4B,CAAC;MAC7C;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C,CAAC,SAAS;MACRtB,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB;EACF,CAAC;EAED,oBACEJ,OAAA,CAACL,GAAG;IACFgC,EAAE,EAAE;MACFC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE,MAAM;MACfC,aAAa,EAAE,QAAQ;MACvBC,cAAc,EAAE,QAAQ;MACxBC,UAAU,EAAE,QAAQ;MACpBC,OAAO,EAAE,SAAS;MAClBC,KAAK,EAAE;IACT,CAAE;IAAAC,QAAA,gBAEFnC,OAAA,CAACH,UAAU;MAACuC,OAAO,EAAC,IAAI;MAACC,YAAY;MAAAF,QAAA,EAAC;IAEtC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,EACZtC,OAAO,gBACNH,OAAA,CAACJ,gBAAgB;MAACsC,KAAK,EAAC;IAAW;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,GACpCpC,MAAM,gBACRL,OAAA;MACE0C,IAAI,EAAErC,MAAO;MACbsC,QAAQ,EAAC,mBAAmB;MAC5BC,KAAK,EAAE;QAAEV,KAAK,EAAE;MAAU,CAAE;MAAAC,QAAA,EAC7B;IAED;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAEJzC,OAAA,CAACF,UAAU;MAAC+C,YAAY,EAAEtC;IAAiB;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAC9C;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACvC,EAAA,CA/DID,IAAc;AAAA6C,EAAA,GAAd7C,IAAc;AAiEpB,eAAeA,IAAI;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}